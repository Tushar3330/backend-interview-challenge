{
  "info": {
    "name": "Task Sync API",
    "description": "Backend Interview Challenge - Task Sync API Collection\n\nThis collection contains all endpoints for testing the Task Sync API.\n\n**Base URL:** Replace {{baseUrl}} with your deployed URL\n- Local: http://localhost:3000\n- Render: https://your-app.onrender.com",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "taskId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Task Management",
      "item": [
        {
          "name": "Create Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('taskId', jsonData.id);",
                  "    pm.test('Status is 201', () => pm.response.to.have.status(201));",
                  "    pm.test('Task has ID', () => pm.expect(jsonData.id).to.exist);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"description\": \"Write comprehensive docs for the Task Sync API\",\n  \"completed\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            },
            "description": "Create a new task. Title is required."
          },
          "response": []
        },
        {
          "name": "Get All Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Response is array', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            },
            "description": "Get all non-deleted tasks"
          },
          "response": []
        },
        {
          "name": "Get Task by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Task has required fields', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('sync_status');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            },
            "description": "Get a specific task by ID"
          },
          "response": []
        },
        {
          "name": "Update Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Task updated', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.sync_status).to.equal('pending');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated task title\",\n  \"completed\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            },
            "description": "Update an existing task. At least one field required."
          },
          "response": []
        },
        {
          "name": "Delete Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 204', () => pm.response.to.have.status(204));"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            },
            "description": "Soft delete a task (sets is_deleted flag)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sync Operations",
      "item": [
        {
          "name": "Trigger Sync",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Sync completed', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('synced_items');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/sync",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sync"]
            },
            "description": "Manually trigger synchronization of pending tasks"
          },
          "response": []
        },
        {
          "name": "Get Sync Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status retrieved', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('pending_sync_count');",
                  "    pm.expect(jsonData).to.have.property('is_online');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "status"]
            },
            "description": "Check current sync status including pending count and online status"
          },
          "response": []
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Health OK', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('ok');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Health check endpoint to verify API is running"
          },
          "response": []
        }
      ]
    }
  ]
}
